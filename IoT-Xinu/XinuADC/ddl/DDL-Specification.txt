DDL Specification
The DDL for this application is written in json. Following is the object hierarchy and their properties. All fields with values in quotes are of type string, otherwise integer. Any value can also be "null", without the quotes.
Not all objects will have all possible fields defined for them. This means that those particular fields are not required to describe that particular object.
The numbering in this specific defines the nesting of the objects and their properties.

The DDL parser outputs a set of *ddl-out files in the /include folder of xinu and then these are directly included in the driver code.

1.	Device
Object to describe the device.

1.1	Id
Id defines the device Id

1.2	Name
Name defines the device name. This may or may not be same to device id.
1.3	Type

Device type can be "cloud", "edge", "beaglebone", "sensor", "actuator"

1.4	Interface
Interface defines how the device needs to be connected to the beaglebone and what methods it exposes on the interface. Valid for sensor and actuator.

1.4.1	IP
IP address of the device
1.4.2	Port
Listening port of the device

1.4.3	Connection
Defines physical connection of the device. Properties are "number" and "pin".
1.4.3.1	Number
Number of physical connection pins. Valid for sensor and actuator only.
1.4.3.2	Pin
Contains the following elements:
Index: Index of pin
Id: Id of pin
Port: Port on beaglebone expansion header (can be 8 or 9)
Pin: Pin number on particular header (can be 0 to 45)
PinName: Denotes description of pin
Direction: can be "DIR_OUT" or "DIR_IN" for reading or writing to pin respectively

1.4.4	Signal
Signal defines the signal sent by either a sensor or actuator. This is not useful for other devices, which have a more generalized object called "interaction"
1.4.4.1	Id
Id of signal
1.4.4.2	Operation
Either "input" in case of actuator or "output" in case of sensor
1.4.4.3 Type
Can be digital or analog
1.4.4.4	Measurement
Can be gpio or adc
1.4.4.5	Unit
can be binary, integer etc
1.4.4.6	Method
Defines a method to be generated to code by the parser.
1.4.4.6.1	Name
Name of the method
1.4.4.6.2	Configuration
Object that defines multiple ways of action depending on an argument. Contains members arg (the argument on which configuration is based) and pin (which defines the actions to be taken)
1.4.4.7	SampleMode
defines the averaging mode for sampling of the adc. Possible modes are single, eight and sixteen
1.4.4.8	Range
Range of the signal values. Has min and max members

1.4.5	Reading
Defines method and computation formula for converting sensor's signal to the desired value.
1.4.5.1	Unit
Unit for reading, is celsius for temperature sensor
1.4.5.2	method
Method for calculating reading value
1.4.5.2.1	name
Name of the resulting code function. This will be the final function name in the code.
1.4.5.2.2	computation
Has 3 members. Type (which is "formula" in case of temp reading), expression (the mathematical expression), and range (which contains max and min)



2.	Interaction
Interaction defines sending and receiving requests between two devices in the network.
2.1	Type
Type can have values "Restful", "Driver", "beaglebone"
2.2	SourceID
SourceId contains the device id of the source of the interaction.

2.3	DestinationID
DestinationId contains the device id of the destination of the interaction.

2.4	Mode
Mode contains mode of interaction. Can be "TCP" or "UDP"

2.5	Url
Url is the url on which the interaction is going to happen. If not valid for the interaction it will be null.

2.6	Ip
IP address

2.7	Port
Listening port	

2.7	Parameters
Contains list of parameter objects for the interaction

2.7.1	Parameter
Contains fields "name", "type", and "range"


